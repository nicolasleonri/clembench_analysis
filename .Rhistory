filter(metric %in% c("error_card_doesnt_follow_suit", "error_card_not_in_hand", "error_card_not_comprehensible" )) %>%
group_by(model, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
ggplot(plot_data, aes(fill=metric, y=count, x=model)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(label = paste0(round(percentage, 1), "%\n(", count, ")"),
y = cumsum(count)),
position = position_fill(vjust = 0.5),
color = "white", size = 3) +
scale_y_continuous(labels = scales::percent_format(), expand = c(0, 0)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Breakdown of Request Count",
subtitle = "Parsed vs Violated",
x = "Model",
y = "Percentage")
# Parsed vs Violated
unique(df$metric)
df %>%
filter(metric %in% c("semantics_errors", "syntax_errors")) %>%
group_by(model, experiment, metric) %>%
summarise(
count = sum(value == 1, na.rm = TRUE),
total = n(),
percentage = mean(value == 1, na.rm = TRUE) * 100
) %>%
arrange(metric)
# Heatmap: Semantics vs Syntax
plot_data <- df %>%
filter(metric %in% c("semantics_errors", "syntax_errors")) %>%
group_by(model, experiment, metric) %>%
summarise(
count = sum(value == 1, na.rm = TRUE),
total = n(),
percentage = mean(value == 1, na.rm = TRUE) * 100
) %>%
arrange(metric)
View(plot_data)
ggplot(subset(plot_data, metric=="semantics_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Semantics Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
ggplot(subset(plot_data, metric=="syntax_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Syntax Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
subset(plot_data, metric=="syntax_errors")
# Heatmap: Semantics vs Syntax
plot_data <- df %>%
filter(metric %in% c("semantics_errors", "syntax_errors" )) %>%
mutate(metric=replace(metric, metric=="Violated Request Count", "violated_request_count")) %>%
group_by(model, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
plot_data
ggplot(subset(plot_data, metric=="syntax_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Syntax Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
df %>%
filter(metric %in% c("semantics_errors", "syntax_errors" )) %>%
mutate(metric=replace(metric, metric=="Violated Request Count", "violated_request_count")) %>%
group_by(model, experiment, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
# Heatmap: Semantics vs Syntax
plot_data <- df %>%
filter(metric %in% c("semantics_errors", "syntax_errors" )) %>%
mutate(metric=replace(metric, metric=="Violated Request Count", "violated_request_count")) %>%
group_by(model, experiment, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
ggplot(subset(plot_data, metric=="syntax_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Syntax Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
ggplot(subset(plot_data, metric=="semantics_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Syntax Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
# Heatmap: Semantics vs Syntax
plot_data <- df %>%
filter(metric %in% c("semantics_errors", "syntax_errors" )) %>%
mutate(metric=replace(metric, metric=="Violated Request Count", "violated_request_count")) %>%
mutate(experiment = factor(experiment, labels=experiment_order)) %>%
group_by(model, experiment, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
ggplot(subset(plot_data, metric=="semantics_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Syntax Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
# Boxes: Semantics vs Syntax
plot_data <- df %>%
filter(metric %in% c("semantics_errors", "syntax_errors" )) %>%
mutate(metric=replace(metric, metric=="Violated Request Count", "violated_request_count")) %>%
group_by(model, metric) %>%
mutate(experiment = factor(experiment, labels=experiment_order)) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
ggplot(plot_data, aes(fill=metric, y=count, x=model)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(label = paste0(round(percentage, 1), "%\n(", count, ")"),
y = cumsum(count)),
position = position_fill(vjust = 0.5),
color = "white", size = 3) +
scale_y_continuous(labels = scales::percent_format(), expand = c(0, 0)) +
scale_fill_manual(values = c("semantics_errors" = "#0079FF", "syntax_errors" = "#FF0060")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Breakdown of Violated Request Count",
subtitle = "Semantics Errors vs Syntax Errors",
x = "Model",
y = "Percentage")
# Heatmap: Semantics vs Syntax
plot_data <- df %>%
filter(metric %in% c("semantics_errors", "syntax_errors" )) %>%
mutate(metric=replace(metric, metric=="Violated Request Count", "violated_request_count")) %>%
mutate(experiment = factor(experiment, labels=experiment_order)) %>%
group_by(model, experiment, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
ggplot(subset(plot_data, metric=="semantics_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Syntax Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
ggplot(subset(plot_data, metric=="semantics_errors"), aes(x = experiment, y = model, fill = percentage)) +
geom_tile() +
geom_text(aes(label = sprintf("%.1f%%", percentage)), color = "white", size = 3) +
scale_fill_gradient(low = "#0079FF", high = "#FF0060") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Percentage of Semantics Errors by Model and Experiment",
x = "Experiment",
y = "Model",
fill = "Percentage")
plot_data <- df %>%
filter(metric %in% c("error_card_doesnt_follow_suit", "error_card_not_in_hand", "error_card_not_comprehensible" )) %>%
group_by(model, metric) %>%
summarise(
count = sum(value, na.rm = TRUE),
)  %>% group_by(model) %>%
mutate(percentage = count / sum(count) * 100)
ggplot(plot_data, aes(fill=metric, y=count, x=model)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(label = paste0(round(percentage, 1), "%\n(", count, ")"),
y = cumsum(count)),
position = position_fill(vjust = 0.5),
color = "white", size = 3) +
scale_y_continuous(labels = scales::percent_format(), expand = c(0, 0)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.position = "bottom") +
labs(title = "Breakdown of Errors",
subtitle = "Type of errors",
x = "Model",
y = "Percentage")
df %>%
group_by(model, metric)
df %>%
filter(metric %in% c("Main Score", ))
df %>%
filter(metric %in% c("Main Score" ))
group_by(model, metric)
df %>%
filter(metric %in% c("Main Score"))
group_by(model, metric) %>%
summarise(
count = harmonic.mean(value),
)
df
df %>%
filter(metric %in% c("Main Score"))
group_by(model, metric)
df %>%
filter(metric %in% c("Main Score"))
df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, metric)
df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, metric) %>%
summarise(
count = harmonic.mean(value),
)
df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, metric)
df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, metric) %>%
summarise(
value = mean(value na.rm = TRUE),
df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
plot_data
ggplot(plot_data, aes(x = metric, y = value)) +
geom_boxplot(outlier.shape = NA) +  # Create boxplots without showing outliers
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ metric, nrow = 3) + # Overlay scatter points
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for clarity
labs(title = "Scatterbox Plot for Each Model Based on Metrics",
x = "Metric",
y = "Value") +
theme_minimal()
plot_data <- df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
plot_data
#############Main Score###############################
plot_data <- df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
plot_data
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA)
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +  # Create boxplots without showing outliers
geom_jitter(width = 0.2, aes(color = model), size = 2)
plot_data <- df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
labs(title = paste("Main Score"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot_data <- df %>%
filter(metric %in% c("Clemscore for each model")) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
labs(title = paste("Main Score"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot_data <- df %>%
filter(metric %in% c("Clemscore for each model")) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
labs(title = paste("Main Score"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot_data <- df %>%
filter(metric %in% c("Main Score")) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, nrow = 3) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Boxplot for each experiment
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, nrow = 2, ncol = 2) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
experiment_order
experiment_order[:5]
experiment_order[1:5]
experiment_order[5:10]
experiment_order[6:10]
df$experiment_order[1:5]
subset(df, experiment == experiment_order[1:5])
unique(subset(df, experiment == experiment_order[1:5]))
unique(subset(df, experiment == experiment_order[1:5])$experiment)
# Boxplot for each experiment
ggplot(subset(df, experiment == experiment_order[1:5], aes(x = model, y = value)) +
# Boxplot for each experiment
ggplot(subset(df, experiment == experiment_order[1:5]), aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, nrow = 2, ncol = 2) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
subset(df, experiment == experiment_order[1:5])
# Boxplot for each experiment
ggplot(subset(plot_data, experiment == experiment_order[1:5]), aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, nrow = 2, ncol = 2) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
library(psych)
library(RColorBrewer) # display.brewer.all()
library(tidyverse)
library(dplyr)
library(ggplot2)
library(stringr)
library(wesanderson)
# Boxplot for each experiment
ggplot(subset(plot_data, experiment == experiment_order[1:5]), aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, nrow = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Boxplot for each experiment
ggplot(subset(plot_data, experiment == experiment_order[1:5]), aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, ncol = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Boxplot for each experiment
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, ncol = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
subset(plot_data, experiment == experiment_order[1:5])
plot_data
subset(plot_data, experiment == experiment_order[1:5])
# Boxplot for each experiment
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, ncol = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot_data %>%
filter(metric %in% c(experiment_order[1:5]))
plot_data
plot_data %>%
filter(experiment %in% c(experiment_order[1:5]))
test <- plot_data %>%
filter(experiment %in% c(experiment_order[1:5]))
# Boxplot for each experiment
ggplot(test, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, ncol = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
slice2 <- plot_data %>%
filter(experiment %in% c(experiment_order[6:10]))
# Boxplot for each experiment
ggplot(slice2, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, ncol = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot_data <- df %>%
filter(metric %in% c("Main Score")) %>%
mutate(experiment = factor(experiment, labels=experiment_order)) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
slice2 <- plot_data %>%
filter(experiment %in% c(experiment_order[6:10]))
# Boxplot for each experiment
ggplot(slice2, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
facet_wrap(~ experiment, ncol = 2,) + # Overlay scatter points
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot_data <- df %>%
filter(metric %in% c("Main Score")) %>%
mutate(experiment = factor(experiment, labels=experiment_order)) %>%
group_by(model, experiment, episode, metric) %>%
summarise(
value = mean(value, na.rm = TRUE),
)
# Boxplot for each model
ggplot(plot_data, aes(x = model, y = value)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, aes(color = model), size = 2) +
labs(title = paste("Clemscore for each model"),
x = "Model",
y = "Main Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
